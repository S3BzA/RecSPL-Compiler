PROG ::= main GLOBVARS ALGO FUNCTIONS
GLOBVARS ::= /* nullable */
GLOBVARS ::= VTYP VNAME , GLOBVARS
VTYP ::= num
VTYP ::= text
VNAME ::= V-Token
ALGO ::= begin INSTRUC end
INSTRUC ::= /* nullable */
INSTRUC ::= COMMAND ; INSTRUC
COMMAND ::= skip
COMMAND ::= halt
COMMAND ::= print ATOMIC
COMMAND ::= ASSIGN
COMMAND ::= CALL
COMMAND ::= BRANCH
COMMAND ::= return ATOMIC
ATOMIC ::= VNAME
ATOMIC ::= CONST
CONST ::= N-Token
CONST ::= T-Token
ASSIGN ::= VNAME ASSIGNOP
ASSIGNOP ::= < input
ASSIGNOP ::= = Term
CALL ::= FNAME(ATOMIC, ATOMIC, ATOMIC)
BRANCH ::= if COND then ALGO else ALGO
TERM ::= ATOMIC
TERM ::= CALL
TERM ::= OP
OP ::= UNOP(ARG)
OP ::= BINOP(ARG,ARG)
ARG ::= ATOMIC
ARG ::= OP
COND ::= UCOND
COND ::= BCOND
SIMPLE ::= BINOP( ATOMIC , ATOMIC )
UCOND ::= UNOP(SIMPLE)
BCOND ::= BINOP(BPARAM)
BPARAM ::= SIMPLE,SIMPLE
BPARAM ::= ATOMIC,ATOMIC
UNOP ::= not
UNOP ::= sqrt
BINOP ::= or
BINOP ::= and
BINOP ::= eq
BINOP ::= grt
BINOP ::= add
BINOP ::= sub
BINOP ::= mul
BINOP ::= div
FNAME ::= F-Token
FUNCTIONS ::= /* nullable */
FUNCTIONS ::= DECL FUNCTIONS
DECL ::= HEADER BODY
HEADER ::= FTYP FNAME(VNAME, VNAME, VNAME)
FTYP ::= num
FTYP ::= void
BODY ::= PROLOG LOCVARS ALGO EPILOG SUBFUNCS end
PROLOG ::= {
EPILOG ::= }
LOCVARS ::= VTYP VNAME , VTYP VNAME , VTYP VNAME ,
SUBFUNCS ::= FUNCTIONS